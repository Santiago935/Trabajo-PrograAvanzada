package cofres;

import java.util.HashMap;

import grafos.*;
import red.Coordenada;
import red.Red;
import red.Robopuerto;
import utiles.Item;

//Cofre clase abstracta que podra ser un cofre de un tipo y comportamiento especifico
public abstract class Cofre implements Red.ComponenteRed{
	private String id;
	private final Coordenada coordenada;
	private final Nodo nodo;
	protected HashMap<Item, Integer> items; //listado de items que tendra el cofre internamente

	private Robopuerto rp_mas_cercano;
	private double distancia_rp;

	public Cofre(int x, int y, String id) {
		this.id = id;
		this.coordenada = new Coordenada(x, y);
		this.nodo = new Nodo(x + x * y, id); // Para tener id Ãºnico
	    this.items = new HashMap<>(); // Inicialmente cofre vacio
	}


    public boolean tieneItem(Item item) {
        return items.containsKey(item) && items.get(item) > 0;
    }

	public Nodo getNodo() {
		return nodo;
	}

	public Coordenada getCoordenada() {
		return coordenada;
	}

	public Robopuerto getRp_mas_cercano() {
		return rp_mas_cercano;
	}

	public void setRp_mas_cercano(Robopuerto rp_mas_cercano, double distancia) {
		this.rp_mas_cercano = rp_mas_cercano;
		setDistancia_rp(distancia);
	}

	public double getDistanciaRP_minima() {
		return distancia_rp;
	}

	private void setDistancia_rp(double distancia_rp) {
		this.distancia_rp = distancia_rp;
	}

	public String getId() {
		return id;
	}

	@Override
	public String toString() {
		return "Cofre [id=" + id + ", coordenada=" + coordenada + ", nodo=" + nodo + "]";
	}

	@Override
	public boolean equals(Object o) {
	    if (this == o) return true;
	    if (o == null || getClass() != o.getClass()) return false;
	    Cofre cofre = (Cofre) o;
	    return id.equals(cofre.id);
	}

	@Override
	public int hashCode() {
	    return id.hashCode();
	}

    public void guardarItem(Item item, int cantidad) {
        items.put(item, items.getOrDefault(item, 0) + cantidad);
    }

    public boolean sacarItem(Item item, int cantidad) {
        int disponible = items.getOrDefault(item, 0);
        if (disponible < cantidad) return false;

        if (disponible == cantidad)
            items.remove(item);
        else
            items.put(item, disponible - cantidad);

        return true;
    }

    public int consultarStock(Item item) {
        return items.getOrDefault(item, 0);
    }
	
	
}