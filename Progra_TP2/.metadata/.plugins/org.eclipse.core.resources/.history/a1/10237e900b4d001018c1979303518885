package utiles;

import grafos.*;
import red.*;
import cola_de_prioridad.TDA.Cola_prioridad_heap;
import java.util.*;


public class SimuladorRed {
	private Red red; // Red espec√≠fica a simular
	private Cola_prioridad_heap<Pedido> pedidos = new Cola_prioridad_heap<>();
	private List<Robot> disponibles = new ArrayList<>();
	private List<Robot> ocupados = new ArrayList<>();

	public SimuladorRed(Red red) {
		this.red = red;
		this.disponibles.addAll(red.getRobots());
	}

	public void agregarPedido(Pedido p) {
		pedidos.encolar(p);
	}

	public void simularTurno() {
		// Asignar pedidos
		while (!pedidos.esVacia() && !disponibles.isEmpty()) {
			Pedido pedido = pedidos.desencolar();
			Robot mejor = buscarRobotMasCercano(pedido.getcSolicito().getNodo());
			if (mejor == null) {
				pedidos.encolar(pedido);
				break;
			}
			List<Nodo> camino = dijkstra(mejor.getNodo_actual(), pedido.getcSolicito().getNodo());
			mejor.asignarViaje(camino, pedido, true);
			disponibles.remove(mejor);
			ocupados.add(mejor);
		}

		// Avanzar robots ocupados
		List<Robot> terminados = new ArrayList<>();
		for (Robot r : ocupados) {
			r.avanzarUnTurno(this); // pasamos el simulador
			if (r.estaLibre()) {
				terminados.add(r);
			}
		}
		ocupados.removeAll(terminados);
		disponibles.addAll(terminados);
	}

	public void reencolarPedido(Pedido nuevo) {
		pedidos.encolar(nuevo);
	}
	
	
}
