package utiles;

import grafos.*;
import grafos.AlgoritmosGrafos.Dijkstra_resultado;
import red.*;
import cola_de_prioridad.TDA.Cola_prioridad_heap;
import java.util.*;
import cofres.*;

public class SimuladorRed {
	private Red red; // Red espec√≠fica a simular
	private Cola_prioridad_heap<Pedido> pedidos = new Cola_prioridad_heap<>();
	private ArrayList<Robot> disponibles = new ArrayList<>();
	private ArrayList<Robot> buscandoItem = new ArrayList<>();
	private ArrayList<Robot> llevandoItem = new ArrayList<>();
	private Set<Integer> robopuertos = new HashSet<Integer>();

	public SimuladorRed(Red red) {
		this.red = red;
		this.disponibles.addAll(red.getRobots());
		this.robopuertos = red.getIdsNodosRobopuertos();
	}

	public void agregarPedido(Pedido p) {
		pedidos.encolar(p);
	}


	public void simularTurno() {
		// Asignar pedidos
		while (!pedidos.estaVacia() && !disponibles.isEmpty()) {
			Pedido pedido = pedidos.desencolar();
			RobotElegido eleccion = obtenerRobotMasCercano(disponibles, pedido.getcOrigen(), red.getGrafo_red());

			if (eleccion == null || eleccion.robot == null) {
				pedidos.encolar(pedido);
				break;
			}
			
			// Crear camino y viaje
			eleccion.robot.asignarViaje(pedido.getcOrigen().getNodo(), (int) Math.ceil(eleccion.getDistanciaMinima()), eleccion.getBateriaLlegada(), pedido, true);
			
			disponibles.remove(eleccion.robot);
			buscandoItem.add(eleccion.robot);
		}

		// Avanzar robots que buscan item
		List<Robot> listosParaLlevar = new ArrayList<>();
		for (Robot r : buscandoItem) {
			r.avanzarUnTurno(this);
			if (r.estaEnDestino()) {
				Cofre cofre = r.getPedidoActual().getcSolicito();
				//cofre.interactuarConRobot(r);

				//CALCULAR RUTA NUEVA
				r.asignarViaje(camino, r.getPedidoActual(), false);
				listosParaLlevar.add(r);
			}
		}
		buscandoItem.removeAll(listosParaLlevar);
		llevandoItem.addAll(listosParaLlevar);

		// Avanzar robots que llevan item
		List<Robot> listosParaDescargar = new ArrayList<>();
		for (Robot r : llevandoItem) {
			r.avanzarUnTurno(this);
			if (r.estaEnDestino()) {
				Cofre cofre = r.getPedidoActual().getcAtendio();
				cofre.interactuarConRobot(r);
				listosParaDescargar.add(r);
			}
		}
		llevandoItem.removeAll(listosParaDescargar);
		disponibles.addAll(listosParaDescargar);
	}


	public void reencolarPedido(Pedido nuevo) {
		pedidos.encolar(nuevo);
	}
	
	public RobotElegido obtenerRobotMasCercano(ArrayList<Robot> robots, Cofre cofre, Grafo grafo) {
	    Robot robotMinimo = null;
	    Double distanciaMinima = Double.MAX_VALUE;
	    Double bateriaLlegada = 0.0;
	    
	    Nodo destino = cofre.getNodo(); 

	    for (Robot robotActual : robots) {
	        Nodo origen = robotActual.getNodo_actual();
	        Double bateria = robotActual.getBateria(); 
	        Double cargaMax = robotActual.getCarga_max();

	        //Hacemos un dijkstra del robot al cofre de llegada
	        Dijkstra_resultado resul = AlgoritmosGrafos.dijkstraConBateria(
	            grafo,
	            origen,
	            bateria,
	            cargaMax,
	            this.robopuertos
	        );
	        
	        Map<Integer, Double> costosMinimos = resul.getCostosMinimos();
	        Map<Integer, Double> bateriasMinimas = resul.getMejorBateriaConCostoMinimoDouble();

	        Double distanciaActual = costosMinimos.get(destino.getId());
	        Double bateriaActual = bateriasMinimas.get(destino.getId());
	        
	        //Si tengo nuevo minimo
	        if (Double.compare(distanciaActual, distanciaMinima) < 0) {
	            distanciaMinima = distanciaActual;
	            robotMinimo = robotActual;
	            bateriaLlegada = bateriaActual;
	        }
	    }

	    return new RobotElegido(robotMinimo, distanciaMinima, bateriaLlegada);
	}

	private class RobotElegido
	{
		private Robot robot;
		private Double distanciaMinima;
		private Double bateriaLlegada;
		
		public RobotElegido(Robot robot, Double distanciaMinima, Double bateriaLlegada)
		{
			this.robot=robot;
			this.distanciaMinima = distanciaMinima;
			this.bateriaLlegada = bateriaLlegada;
		}
	}

		public Robot getRobot() {
			return robot;
		}

		public void setRobot(Robot robot) {
			this.robot = robot;
		}

		public Double getDistanciaMinima() {
			return distanciaMinima;
		}

		public void setDistanciaMinima(Double distanciaMinima) {
			this.distanciaMinima = distanciaMinima;
		}

		public Double getBateriaLlegada() {
			return bateriaLlegada;
		}

		public void setBateriaLlegada(Double bateriaLlegada) {
			this.bateriaLlegada = bateriaLlegada;
		}
		
	}
	
}
